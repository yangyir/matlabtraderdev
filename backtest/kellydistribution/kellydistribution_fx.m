% names_fx = {'usdx';'eurusd';'usdjpy';'gbpusd';'audusd';'usdcad';'usdchf';...
%     'eurjpy';'eurchf';'gbpeur';'gbpjpy';'audjpy';...
%     'usdcnh'};

names_fx = {'eurusd';'usdjpy';'gbpusd';'audusd';'usdcad';'usdchf'; 'eurjpy';'audjpy';'xau'};
%%
output_fx_daily = fractal_kelly_summary('codes',names_fx,...
    'frequency','daily','usefractalupdate',0,'usefibonacci',1,'direction','both');
%
[~,~,tbl_fx_daily,~,~,~,~,strat_fx_daily] = kellydistributionsummary(output_fx_daily);
%
[tbl_report_fx_daily,stats_report_fx_daily] = kellydistributionreport(tbl_fx_daily,strat_fx_daily);
%
dir_ = [getenv('onedrive'),'\fractal backtest\kelly distribution\matlab\fx\'];
try
    cd(dir_);
catch
    mkdir(dir_);
    cd(dir_);
end
save([dir_,'strat_fx_daily.mat'],'strat_fx_daily');
fprintf('strat M-file saved...\n');
%
save([dir_,'tbl_report_fx_daily.mat'],'tbl_report_fx_daily');
fprintf('tbl report M-file saved...\n');
%
save([dir_,'output_fx_daily.mat'],'output_fx_daily');
fprintf('output M-file saved...\n');
%
% filename = [getenv('onedrive'),'\fractal backtest\kelly distribution\tbl_report_fx_daily.xlsx'];
% writetable(tbl_report_fx_daily,filename,'Sheet',1,'Range','A1');
% fprintf('excel file saved...\n');
%%
%%
nfx = length(names_fx);
tblpnls = cell(nfx,1);
tblout2s = cell(nfx,1);
statsouts = cell(nfx,1);
for i = 1:nfx
    [tblpnls{i},tblout2s{i},statsouts{i}] = charlotte_gensingleassetprofile('assetname',names_fx{i},'frequency','daily');
end
%
maxpnldrawdown = zeros(nfx,1);varpnldrawdown = zeros(nfx,1);
varpnl = zeros(nfx,1);avgpnl = zeros(nfx,1);stdpnl = zeros(nfx,1);
sharpratio = zeros(nfx,1);
maxtradepnldrawdown = zeros(nfx,1);vartradepnldrawdown = zeros(nfx,1);
avgtradepnl = zeros(nfx,1);stdtradepnl = zeros(nfx,1);
Ns = zeros(nfx,1);Ws = zeros(nfx,1);Rs = zeros(nfx,1);Ks = zeros(nfx,1);
maxretdrawdown = zeros(nfx,1);varretsdrawdown = zeros(nfx,1);
varret = zeros(nfx,1);avgret = zeros(nfx,1);stdret = zeros(nfx,1);
maxtraderetdrawdown = zeros(nfx,1);
vartraderetdrawdown = zeros(nfx,1);
for i = 1:nfx
    maxpnldrawdown(i) = statsouts{i}.maxpnldrawdown;
    varpnldrawdown(i) = statsouts{i}.varpnldrawdown;
    varpnl(i) = statsouts{i}.varpnl;
    avgpnl(i) = statsouts{i}.avgpnl;
    stdpnl(i) = statsouts{i}.stdpnl;
    sharpratio(i) = statsouts{i}.sharpratio;
    maxtradepnldrawdown(i) = statsouts{i}.maxtradepnldrawdown;
    vartradepnldrawdown(i) = statsouts{i}.vartradepnldrawdown;
    avgtradepnl(i) = statsouts{i}.avgtradepnl;
    stdtradepnl(i) = statsouts{i}.stdtradepnl;
    Ns(i) = statsouts{i}.N;
    Ws(i) = statsouts{i}.W;
    Rs(i) = statsouts{i}.R;
    Ks(i) = statsouts{i}.K;
    maxretdrawdown(i) = statsouts{i}.maxretdrawdown;
    varretsdrawdown(i) = statsouts{i}.varretsdrawdown;
    varret(i) = statsouts{i}.varret;
    avgret(i) = statsouts{i}.avgret;
    stdret(i) = statsouts{i}.stdret;
    maxtraderetdrawdown(i) = statsouts{i}.maxtraderetdrawdown;
    vartraderetdrawdown(i) = statsouts{i}.vartraderetdrawdown;
end
tblreport_fx = table(names_fx,maxpnldrawdown,varpnldrawdown,varpnl,avgpnl,stdpnl,...
    sharpratio,maxtradepnldrawdown,vartradepnldrawdown,avgtradepnl,stdtradepnl,...
    Ns,Ws,Rs,Ks,maxretdrawdown,varretsdrawdown,varret,avgret,stdret,...
    maxtraderetdrawdown,vartraderetdrawdown);
fprintf('tblreport_fx generated...\n');
%%
%1.merge all tbloutput to list all trades of different underlying
tbloutput_all = tblout2s{1};
for i = 2:nfx
    temp = [tbloutput_all;tblout2s{i}];
    tbloutput_all = temp;
end
%2.pop-up date vector to cover all dates of all trades,i.e.
%the latest start date to the earliest end date
dtsvec = tblpnls{1}.dts;
dtmin = dtsvec(1);
dtmax = dtsvec(end);
for i = 1:nfx
    dtmin = max(dtmin,tblpnls{i}.dts(1));
    dtmax = min(dtmax,tblpnls{i}.dts(end));
    temp = [dtsvec;tblpnls{i}.dts];
    dtsvec = temp;
    if i == nfx
        dtsvec = unique(dtsvec);
        dtsvec = dtsvec(dtsvec >= dtmin & dtsvec <= dtmax);
    end
end
%
%3.record position on each historical dates
dtopen = datenum(tbloutput_all.opendatetime,'yyyy-mm-dd');
dtclose = datenum(tbloutput_all.closedatetime,'yyyy-mm-dd');
posmat = zeros(length(dtsvec),nfx);
kellymat = posmat;
for i = 1:length(dtsvec)
    dt_i = dtsvec(i);
    %position on this date shall with its open date before or on this
    %date while its closedate after or on this date
    idx = dtopen <= dt_i & dtclose >= dt_i;
    codes_i = tbloutput_all.code(idx);
    kellys_i = tbloutput_all.kellyused(idx);
    if ~isempty(codes_i)
        for j = 1:size(codes_i,1)
            for k = 1:nfx
                if strcmpi(names_fx{k},codes_i{j})
                    posmat(i,k) = 1;
                    kellymat(i,k) = kellys_i(j);
                    break
                end
            end 
        end 
    end
end
%
%4.merge timeseries (index) of each underlying generated by the strategy
runningrets = zeros(length(dtsvec),nfx);
for i = 1:length(dtsvec)
    dt_i = dtsvec(i);
    for j = 1:nfx
        %its index value shall be the value of the date on or (last before) the cob date 
        runningrets(i,j) = tblpnls{j}.runningrets(find(tblpnls{j}.dts <= dt_i,1,'last'));
    end
end
%5.start the analysis from the first date that no position of any underying
%is found
posvec = sum(posmat,2);
idxstart = find(posvec == 0,1,'first');
posmat = posmat(idxstart:end,:);
runningrets = runningrets(idxstart:end,:);
dtsvec = dtsvec(idxstart:end);
runningretchgs = [zeros(1,nfx);runningrets(2:end,:)-runningrets(1:end-1,:)];
%
participaterate = 0.7;
runningretchgportfolio = zeros(size(runningretchgs,1),1);
utilisedratio = zeros(size(runningretchgs,1),1);

for i = 1:size(runningretchgs,1)
    runningretchgportfolio(i) = tblreport_fx.Ks' * runningretchgs(i,:)'*participaterate;
    utilisedratio(i) = tblreport_fx.Ks' * posmat(i,:)'*participaterate;
end
residuals = cumsum(runningretchgportfolio)-utilisedratio;
%make sure the minimum of residual is greater than -1
%
%6.statistical analysis of daily,weekly,monthly risk profile
%6.1 daily
yy = year(dtsvec);
mm = month(dtsvec);
ww = weeknum(dtsvec);
ndt = size(dtsvec,1);
tag_week = cell(ndt,1);
tag_month = cell(ndt,1);
for i = 1:ndt
    if mm(i) < 10
        tag_month{i} = [num2str(yy(i)),'_0',num2str(mm(i))];
    else
        tag_month{i} = [num2str(yy(i)),'_',num2str(mm(i))];
    end
    if ww(i) < 10
        tag_week{i} = [num2str(yy(i)),'_0',num2str(ww(i))];
    else
        tag_week{i} = [num2str(yy(i)),'_',num2str(ww(i))];
    end
end
tag_week_unique = unique(tag_week);
tag_month_unique = unique(tag_month);




    
%%
freq = 'daily';
nfractal = 2;
asset = 'usdjpy';
dtfrom = '2024-07-01';
[tblout,kellyout,tblout_notused,kellytables] = charlotte_kellycheck('assetname',asset,'datefrom',dtfrom,'frequency',freq,'reportunused',true);
%%
[tblpnl,tblout2,statsout] = charlotte_gensingleassetprofile('assetname',asset,'frequency',freq);
open tblout2;open statsout;open tblpnl;
set(0,'defaultfigurewindowstyle','docked');
timeseries_plot([tblpnl.dts,tblpnl.runningnotional],'figureindex',2,'dateformat','yy-mmm-dd','title',asset);
timeseries_plot([tblpnl.dts,tblpnl.runningrets],'figureindex',3,'dateformat','yy-mmm-dd','title',asset);
%%
asset = 'eurusd';
dt1 = '2024-05-03';
dt2 = '2024-05-22';
[unwindedtrades,carriedtrades,tbl2check] = charlotte_backtest_period('code',asset,'fromdate',dt1,'todate',dt2,'kellytables',kellytables,'showlogs',true,'figureidx',4,'frequency',freq);